- hosts: staging
  vars:
    - username: deploy
    - home_path: "/home/{{ username }}"
    - site_path: "{{ home_path }}/site"
    - services_path: "{{ site_path }}/services"
    - global_python: python3.10
    - venv_bin: "{{ site_path }}/venv/bin"
    - ansible_venv_bin: "{{ home_path }}/ansible_venv/bin"
    - ansible_plugin_dir: "/root/.ansible/plugins/callback"
    - python: "{{ venv_bin }}/python"
    - ansible_python: "{{ ansible_venv_bin }}/python"
    - pip_sync: "{{ venv_bin }}/pip-sync"
    - default_path: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    - initial_user_name: jochen

  tasks:
    - name: "Include secret vars"
      include_vars: secrets.yml

    - name: Add nodejs signing key - do not download if present
      apt_key:
        id: 9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
      environment:
        PATH: "{{ default_path }}"

    - name: Add nodejs repository
      apt_repository:
        repo: deb https://deb.nodesource.com/node_17.x bullseye main
        state: present
      environment:
        PATH: "{{ default_path }}"

    - name: Install required build packages
      apt:
        name: ["git", "nodejs"]
      environment:
        PATH: "{{ default_path }}"

    - name: Add a unix user with a bash shell
      user:
        name: "{{ username }}"
        shell: /bin/bash
      environment:
        PATH: "{{ default_path }}"

    - name: Git checkout repository
      git:
        repo: "https://github.com/ephes/fastdeploy"
        dest: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create .env file
      template:
        src: env.template.j2
        dest: "{{ site_path }}/.env"
        mode: '0600'
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create .vault_password file
      template:
        src: vault_password.template.j2
        dest: "{{ site_path }}/ansible/.vault_password"
        mode: '0600'
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Install fastdeploy frontend vue app dependencies
      shell: npm install
      args:
        chdir: "{{ site_path }}/frontend"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Build fastdeploy frontend vue app
      shell: npm run build
      args:
        chdir: "{{ site_path }}/frontend"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create virtualenv for python
      shell: "{{ global_python }} -m venv {{ site_path }}/venv"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Upgrade pip prod venv
      shell: "{{ python }} -m pip install --upgrade pip"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create virtualenv for ansible
      shell: "{{ global_python }} -m venv {{ home_path }}/ansible_venv"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Upgrade pip ansible venv
      shell: "{{ ansible_python }} -m pip install --upgrade pip"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Install ansible
      shell: "{{ ansible_python }} -m pip install ansible"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create directory for ansible callback plugins
      file:
        path: "{{ ansible_plugin_dir }}"
        state: directory
        owner: "{{ username }}"

    - name: Copy json stdout callback into default plugin directory
      ansible.builtin.copy:
        src: callback_plugins/json_cb.py
        dest: "{{ ansible_plugin_dir }}/json_cb.py"
        owner: "{{ username }}"
        mode: "0644"

    - name: Create sudoers file for deploy scripts
      template:
        src: fastdeploy_sudoers.template.j2
        dest: /etc/sudoers.d/fastdeploy_as_root
        mode: '0440'
      environment:
        PATH: "{{ default_path }}"

    - name: Create directory for ansible inventory
      file:
        path: "{{ site_path }}/ansible/inventory/"
        state: directory
        owner: "{{ username }}"

    - name: Create local inventory
      template:
        src: hosts.yml.template.j2
        dest: "{{ site_path }}/ansible/inventory/hosts.yml"
        mode: '0600'
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create directory for server start script
      file:
        path: "{{ site_path }}/bin"
        state: directory
        owner: "{{ username }}"

    - name: Create uvicorn start script
      template:
        src: deploy.py.template.j2
        dest: "{{ site_path }}/bin/deploy.py"  # don't use uvicorn.py -> import error
        mode: '0755'
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create directory for fastdeploy service
      file:
        path: "{{ services_path }}/fastdeploy"
        state: directory
        owner: "{{ username }}"

    - name: Create task deploy file for fastdeploy
      template:
        src: fastdeploy_staging_deploy.sh.template.j2
        dest: "{{ services_path }}/fastdeploy/deploy.sh"
        mode: '0755'
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create service config for fastdeploy
      template:
        src: fastdeploy_staging_config.json.template.j2
        dest: "{{ services_path }}/fastdeploy/config.json"
        mode: '0755'
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Install pip-tools
      shell: "{{ python }} -m pip install pip-tools"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Install app production requirements
      # added --pip-args --no-deps because sqlalchemy depends on greenlet!=0.4.17
      # which is incompatible with --require-hashes mode requiring all dependencies
      # to be pinned with '==' *sigh*
      shell: "{{ pip_sync }} --pip-args --no-deps app/requirements/production.txt"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create initial user
      shell: "{{ python }} commands.py create-initial-user"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"
      environment:
        INITIAL_PASSWORD_HASH: "{{ initial_user_password_hash }}"
        INITIAL_USER_NAME: "{{ initial_user_name }}"
        PATH: "{{ default_path }}"

    - name: Sync services from filesystem with database
      shell: "{{ python }} commands.py syncservices {{ initial_user_name }}"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create a symbolic link for uvicorn systemd service
      file:
        src: "{{ site_path }}/ansible/deploy.service"
        dest: /etc/systemd/system/deploy.service
        state: link
      environment:
        PATH: "{{ default_path }}"

    - name: Make sure deploy uvicorn service is restarted
      systemd:
        state: restarted
        name: "{{ username }}"
      environment:
        PATH: "{{ default_path }}"

    - name: Create a symbolic link for traefik loadbalancer
      file:
        src: "{{ site_path }}/ansible/deploy.traefik.yml"
        dest: /etc/traefik/dynamic/deploy.traefik.yml
        state: link
      environment:
        PATH: "{{ default_path }}"
