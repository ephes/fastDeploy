- hosts: staging
  vars:
    - username: deploy
    - site_path: "/home/{{ username }}/site"
    - global_python: python3.10
    - venv_bin: "{{ site_path }}/venv/bin"
    - python: "{{ venv_bin }}/python"
    - pip_sync: "{{ venv_bin }}/pip-sync"
  tasks:
    - include_vars: secrets.yml

    - name: Add nodejs signing key - do not download if present
      apt_key:
        id: 9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add nodejs repository
      apt_repository:
        repo: deb https://deb.nodesource.com/node_17.x buster main
        state: present

    - name: Add yarn signing key - do not download if present
      apt_key:
        id: 72ECF46A56B4AD39C907BBB71646B01B86E50310
        url: https://dl.yarnpkg.com/debian/pubkey.gpg
        state: present

    - name: Add yarn repository
      apt_repository:
        repo: deb https://dl.yarnpkg.com/debian/ stable main
        state: present

    - name: Install required build packages
      apt:
        name: ["git", "yarn", "nodejs"]

    - name: Install required build packages (git,)
      apt:
        name: ["git"]

    - name: Add a unix user with a bash shell
      user:
        name: "{{ username }}"
        shell: /bin/bash

    - name: Git checkout repository
      git:
        repo: "https://github.com/ephes/fastdeploy"
        dest: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"

    - name: Create .env file
      template:
        src: env.template.j2
        dest: "{{ site_path }}/.env"
        mode: '0600'
      become: true
      become_user: "{{ username }}"

    - name: Install fastdeploy frontend vue app dependencies
      shell: npm install
      args:
        chdir: "{{ site_path }}/frontend"
      become: true
      become_user: "{{ username }}"

    - name: Build fastdeploy frontend vue app
      shell: npm run build
      args:
        chdir: "{{ site_path }}/frontend"
      become: true
      become_user: "{{ username }}"

    - name: Create virtualenv for python
      shell: "{{ global_python }} -m venv {{ site_path }}/venv"
      become: true
      become_user: "{{ username }}"

    - name: Upgrade pip
      shell: "{{ python }} -m pip install --upgrade pip"
      become: true
      become_user: "{{ username }}"

    - name: Install pip-tools
      shell: "{{ python }} -m pip install pip-tools"
      become: true
      become_user: "{{ username }}"

    - name: Install app production requirements
      shell: "{{ pip_sync }} app/requirements/production.txt"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"

    - name: Create initial user
      shell: "{{ python }} manage.py create-initial-user"
      args:
        chdir: "{{ site_path }}"
      become: true
      become_user: "{{ username }}"
      environment:
        INITIAL_PASSWORD_HASH: "{{ initial_user_password_hash }}"
        INITIAL_USER_NAME: jochen

    - name: Create a symbolic link for uvicorn systemd service
      file:
        src: "{{ site_path }}/ansible/deploy.service"
        dest: /etc/systemd/system/deploy.service
        state: link

    - name: Make sure deploy uvicorn service is running
      systemd:
        state: restarted
        name: "{{ username }}"

    - name: Create a symbolic link for traefik loadbalancer
      file:
        src: "{{ site_path }}/ansible/deploy.traefik.yml"
        dest: /etc/traefik/dynamic/deploy.traefik.yml
        state: link
